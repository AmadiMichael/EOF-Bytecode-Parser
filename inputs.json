{
    "validInvalid": {
        "_info": {
            "comment": "Test various examples to see if they are valid or invalid.\nImplements\n  EOF1I0001 check that EOF1 with a bad magic number fails\n  EOF1I0002 check that EOF1 with a bad version number fails\n  EOF1I0003 check that EOF1 with a bad section order fails\n  EOF1I0004 check that EOF1 missing a section fails\n  EOF1I0005 check that EOF1 with a bad end of sections number fails\n  EOF1I0006 check that EOF1 with too many or too few bytes fails\n  EOF1I0007 check that EOF1 with a malformed code section fails\n  EOF1I0008 check that EOF1 with an illegal opcode fails\n  EOF1I0009 check that EOF1 with the wrong maxStackDepth fails\n  EOF1I0010 check that return values are not allowed on section 0\n  EOF1I0011 check that function calls to code sections that don't exist fail\n  EOF1I0012 check that code sections that cause stack underflow fail\n  EOF1I0013 check that we can't return more values than we declare\n  EOF1I0014 check that code that looks deeper in the stack than the parameters fails\n  EOF1I0015 check that code that uses removed opcodes fails\n  EOF1I0016 check that code that uses new relative jumps to outside the section fails\n  EOF1I0017 check that parameters are not allowed on section 0\n  EOF1I0018 inconsistent number of code sections (between types and code)\n  EOF1I0019 check that jumps into the middle on an opcode are not allowed\n  EOF1I0020 check that you can't get to the same opcode with two different stack heights\n  EOF1I0022 stack underflow caused by a function call\n  EOF1I0023 sections with unreachable code fail\n  EOF1I0024 sections that end with a non-terminator opcode fail\n  EOF1I0025 data stack height of 1024 is invalid\n  EOF1V0001 check that simple valid EOF1 deploys\n  EOF1V0002 check that valid EOF1 with two code sections deploys\n  EOF1V0003 check that valid EOF1 with four code sections deploys\n  EOF1V0004 check that valid EOF1 can include 0xFE, the designated invalid opcode\n  EOF1V0005 check that EOF1 with the right maxStackDepth deploys\n  EOF1V0006 check that return values are allowed on code sections that aren't zero\n  EOF1V0007 check that function calls to code sections that exist are allowed\n  EOF1V0008 check that code that uses a new style relative jump (5C) succeeds\n  EOF1V0009 check that parameters are allowed on code sections that aren't zero\n  EOF1V0010 parameters are part of the max stack height\n  EOF1V0011 check that code that uses a new style conditional jump (5D) succeeds\n  EOF1V0012 return values on code sections affect maxStackHeight of the caller\n  EOF1V0013 jump tables work\n  EOF1V0014 sections that end with a legit terminating opcode are OK\n  EOF1V0015 data stack height of 1023 is valid\n  EOF1V0016 check that data section size can be less than the declared size\n",
            "filling-rpc-server": "evmone-t8n 0.12.0-dev+commit.8202c81e",
            "filling-tool-version": "retesteth-0.3.2-cancun+commit.a7cdb586.Linux.g++",
            "generatedTestHash": "c62a0385dff27dfa283e037ddc2299ce1ecaa2932061306af3a7191c4dfa5f86",
            "lllcversion": "Error getting LLLC Version",
            "solidity": "Version: 0.8.25+commit.b61c2a91.Linux.g++",
            "source": "src/EOFTestsFiller/efExample/validInvalidFiller.yml",
            "sourceHash": "0eb24a7a7ffb551c5816d2986e04ef73171870f7facaafb8bb91da89bb3a20a3"
        },
        "vectors": {
            "validInvalid_0": {
                "code": "0xef000101000402000100030400010000800001305000ef",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_1": {
                "code": "0xef0001010004020001000304000400008000013050000bad",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_10": {
                "code": "0xef0001010014020005001900030003000100010400040000800001008000020080000200800000000000005f35e2030000000300060009e50001e50002e50003e30004005f5ff35f5ffdfee40bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_11": {
                "code": "0xef0001010004020001000d04000400008000016001e2010002000030503050000bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_13": {
                "code": "0xef0001010004020001000804000400008000016001e10001305b000bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_16": {
                "code": "0xef000101000802000100030400040000800001000000003050000bad60a7",
                "results": {
                    "Prague": {
                        "exception": "EOF_InvalidTypeSectionSize",
                        "result": false
                    }
                }
            },
            "validInvalid_17": {
                "code": "0xef0001010008020001000304000400008000013050000bad60a7",
                "results": {
                    "Prague": {
                        "exception": "EOF_InvalidTypeSectionSize",
                        "result": false
                    }
                }
            },
            "validInvalid_2": {
                "code": "0xef0001010004020001000304000400008000013050000bad60a70bad",
                "results": {
                    "Prague": {
                        "exception": "EOF_InvalidSectionBodiesSize",
                        "result": false
                    }
                }
            },
            "validInvalid_21": {
                "code": "0xef000101000402000100040400010000800007",
                "results": {
                    "Prague": {
                        "exception": "EOF_InvalidSectionBodiesSize",
                        "result": false
                    }
                }
            },
            "validInvalid_24": {
                "code": "0xef00010100080200020006000304000400008000010101000130e3000150005030e40bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_25": {
                "code": "0xef000101000802000200040002040004000080000100010001e300010030e40bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_28": {
                "code": "0xef000101000c0200030028000b001f04000400008003ff000a000a00640064e30002e30002e30002e30002e30002e30002e30002e30002e30002e30002e30001e300013030300030303030303030303030e4e30001e30001e30001e30001e30001e30001e30001e30001e30001e30001e40bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_3": {
                "code": "0xef0001010004020001000304000400008000013050000bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_30": {
                "code": "0xef0001010010020004000b000300030003040004000080000101010001000000010101000130e30001e30003e30002005030e43050e45030e40bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_31": {
                "code": "0xef00010100100200040015000500070007040004000080000100800002008000030080000130505f35e202000000030006e50001e50002e50003303050500030303050505000305030503050000bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_32": {
                "code": "0xef00010100100200040010000300070007040004000080000100800000008000030080000130505f35e20100000003e50001e50003e5000230303050505000305030503050000bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_37": {
                "code": "0xef0001010004020001000304000400000100013050fe0bad60a7",
                "results": {
                    "Prague": {
                        "exception": "EOF_InvalidFirstSectionType",
                        "result": false
                    }
                }
            },
            "validInvalid_38": {
                "code": "0xef000101000802000200050003040004000080000202800002305fe500015050000bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_39": {
                "code": "0xef0001010004020001000304000400018000013050fe0bad60a7",
                "results": {
                    "Prague": {
                        "exception": "EOF_InvalidFirstSectionType",
                        "result": false
                    }
                }
            },
            "validInvalid_41": {
                "code": "0xef00010100040200010001040004000080000530503050000bad60a7",
                "results": {
                    "Prague": {
                        "exception": "EOF_InvalidSectionBodiesSize",
                        "result": false
                    }
                }
            },
            "validInvalid_43": {
                "code": "0xef00010100040200010003040001ff00800001305000ef",
                "results": {
                    "Prague": {
                        "exception": "EOF_HeaderTerminatorMissing",
                        "result": false
                    }
                }
            },
            "validInvalid_44": {
                "code": "0xef020101000402000100030400010000800001305000ef",
                "results": {
                    "Prague": {
                        "exception": "EOF_InvalidPrefix",
                        "result": false
                    }
                }
            },
            "validInvalid_45": {
                "code": "0xef000001000402000100030400010000800001305000ef",
                "results": {
                    "Prague": {
                        "exception": "EOF_UnknownVersion",
                        "result": false
                    }
                }
            },
            "validInvalid_46": {
                "code": "0xef000201000402000100030400010000800001305000ef",
                "results": {
                    "Prague": {
                        "exception": "EOF_UnknownVersion",
                        "result": false
                    }
                }
            },
            "validInvalid_47": {
                "code": "0xef000102000100030100040400010000800001305000ef",
                "results": {
                    "Prague": {
                        "exception": "EOF_TypeSectionMissing",
                        "result": false
                    }
                }
            },
            "validInvalid_48": {
                "code": "0xef000102000100030400010100040000800001305000ef",
                "results": {
                    "Prague": {
                        "exception": "EOF_TypeSectionMissing",
                        "result": false
                    }
                }
            },
            "validInvalid_49": {
                "code": "0xef000102000100030400010000800001305000ef",
                "results": {
                    "Prague": {
                        "exception": "EOF_TypeSectionMissing",
                        "result": false
                    }
                }
            },
            "validInvalid_5": {
                "code": "0xef0001010004020001000304000400008000013050fe0bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_50": {
                "code": "0xef00010100040400010000800001305000ef",
                "results": {
                    "Prague": {
                        "exception": "EOF_CodeSectionMissing",
                        "result": false
                    }
                }
            },
            "validInvalid_51": {
                "code": "0xef000101000402000100030000800001305000ef",
                "results": {
                    "Prague": {
                        "exception": "EOF_DataSectionMissing",
                        "result": false
                    }
                }
            },
            "validInvalid_6": {
                "code": "0xef00010100040200010003040001ff00800001305000ef",
                "results": {
                    "Prague": {
                        "exception": "EOF_HeaderTerminatorMissing",
                        "result": false
                    }
                }
            },
            "validInvalid_7": {
                "code": "0xef0001010004020001000e04000400008000015fe10003e00003e00003e0fffa000bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            },
            "validInvalid_9": {
                "code": "0xef0001010004020001000704000400008000016001e100015b000bad60a7",
                "results": {
                    "Prague": {
                        "result": true
                    }
                }
            }
        }
    }
}